export interface FormattedError {
  message: string
  category: ErrorCategory
  context: string | null
  suggestions: string[]
  originalError: string
}

export type ErrorCategory = 'function' | 'syntax' | 'column' | 'table' | 'unknown'

export default class SqlErrorFormatter {
  /**
   * Formate une erreur SQL pour la rendre lisible
   */
  format(error: Error, sql: string): FormattedError {
    const originalMessage = error.message

    // Extraire le message d'erreur technique (sans la requ√™te)
    const cleanMessage = this.extractErrorMessage(originalMessage)

    // Cat√©goriser l'erreur
    const category = this.categorizeError(cleanMessage)

    // Extraire le contexte (quelques lignes autour de l'erreur)
    const context = this.extractContext(sql, originalMessage)

    // Obtenir des suggestions bas√©es sur le type d'erreur
    const suggestions = this.getSuggestions(cleanMessage, sql, category)

    return {
      message: cleanMessage,
      category,
      context,
      suggestions,
      originalError: originalMessage,
    }
  }

  /**
   * Extrait uniquement le message d'erreur (sans la requ√™te SQL)
   */
  private extractErrorMessage(fullMessage: string): string {
    // Cas SQLite : "near X: syntax error"
    const nearMatch = fullMessage.match(/near "([^"]+)": (.+)/)
    if (nearMatch) {
      return `Erreur de syntaxe pr√®s de "${nearMatch[1]}"`
    }

    // Cas fonction : "wrong number of arguments to function X()"
    const funcMatch = fullMessage.match(/wrong number of arguments to function (\w+)/i)
    if (funcMatch) {
      return `Nombre d'arguments incorrect pour la fonction ${funcMatch[1]}()`
    }

    // Cas fonction inconnue : "no such function: X"
    const noFuncMatch = fullMessage.match(/no such function: (\w+)/i)
    if (noFuncMatch) {
      return `Fonction inconnue : ${noFuncMatch[1]}()`
    }

    // Cas colonne inconnue : "no such column: X"
    const noColMatch = fullMessage.match(/no such column: (\w+)/i)
    if (noColMatch) {
      return `Colonne inconnue : ${noColMatch[1]}`
    }

    // Cas table inconnue : "no such table: X"
    const noTableMatch = fullMessage.match(/no such table: (\w+)/i)
    if (noTableMatch) {
      return `Table inconnue : ${noTableMatch[1]}`
    }

    // Par d√©faut, nettoyer et retourner le message
    // Supprimer la requ√™te SQL du message si elle y est
    let cleaned = fullMessage

    // Si le message contient "SELECT" ou "WITH", probablement la requ√™te est incluse
    if (cleaned.includes('SELECT') || cleaned.includes('WITH')) {
      // Essayer de trouver o√π se termine la requ√™te (avant " - ")
      const dashIndex = cleaned.lastIndexOf(' - ')
      if (dashIndex > -1) {
        cleaned = cleaned.substring(dashIndex + 3)
      }
    }

    return cleaned.replace(/\s+/g, ' ').trim()
  }

  /**
   * Cat√©gorise l'erreur pour mieux cibler les suggestions
   */
  private categorizeError(message: string): ErrorCategory {
    if (/function/i.test(message)) return 'function'
    if (/syntax|near/i.test(message)) return 'syntax'
    if (/column/i.test(message)) return 'column'
    if (/table/i.test(message)) return 'table'
    return 'unknown'
  }

  /**
   * Extrait le contexte autour de l'erreur (3-5 lignes)
   */
  private extractContext(sql: string, errorMessage: string): string | null {
    // Essayer de trouver la fonction/mot probl√©matique dans le message
    let problematicTerm: string | null = null

    // Extraire le terme de diff√©rents patterns d'erreur
    const patterns = [
      /function (\w+)/i,
      /near "([^"]+)"/i,
      /column: (\w+)/i,
      /table: (\w+)/i,
    ]

    for (const pattern of patterns) {
      const match = errorMessage.match(pattern)
      if (match) {
        problematicTerm = match[1]
        break
      }
    }

    if (!problematicTerm) {
      // Pas de terme identifi√©, retourner juste les premi√®res lignes
      const lines = sql.split('\n').slice(0, 5)
      return lines.map((l, i) => `  ${i + 1}: ${l}`).join('\n')
    }

    // Trouver la ligne contenant le terme probl√©matique
    const lines = sql.split('\n')
    let errorLineIndex = -1

    for (let i = 0; i < lines.length; i++) {
      if (lines[i].toLowerCase().includes(problematicTerm.toLowerCase())) {
        errorLineIndex = i
        break
      }
    }

    if (errorLineIndex === -1) {
      // Terme non trouv√©, retourner premi√®res lignes
      return lines.slice(0, 5).map((l, i) => `  ${i + 1}: ${l}`).join('\n')
    }

    // Extraire 2 lignes avant et 2 lignes apr√®s
    const start = Math.max(0, errorLineIndex - 2)
    const end = Math.min(lines.length, errorLineIndex + 3)

    return lines
      .slice(start, end)
      .map((l, i) => {
        const lineNum = start + i + 1
        const marker = lineNum === errorLineIndex + 1 ? '‚Üí' : ' '
        return `${marker} ${lineNum}: ${l}`
      })
      .join('\n')
  }

  /**
   * G√©n√®re des suggestions bas√©es sur le type d'erreur
   */
  private getSuggestions(message: string, sql: string, category: ErrorCategory): string[] {
    const suggestions: string[] = []

    switch (category) {
      case 'function':
        suggestions.push(...this.getFunctionSuggestions(message, sql))
        break
      case 'syntax':
        suggestions.push(...this.getSyntaxSuggestions(message, sql))
        break
      case 'column':
        suggestions.push(...this.getColumnSuggestions(message, sql))
        break
      case 'table':
        suggestions.push(...this.getTableSuggestions(message, sql))
        break
      default:
        suggestions.push('V√©rifiez la syntaxe de votre requ√™te SQL')
    }

    return suggestions
  }

  /**
   * Suggestions pour les erreurs de fonction
   */
  private getFunctionSuggestions(message: string, sql: string): string[] {
    const suggestions: string[] = []

    // D√©tecter TRUNC
    if (/TRUNC/i.test(message) || /TRUNC/i.test(sql)) {
      suggestions.push("TRUNC() en SQLite n'accepte qu'un seul argument (nombre)")
      suggestions.push(
        "Pour tronquer des dates : utilisez DATE() avec modificateurs (ex: DATE(col, 'start of month'))"
      )
    }

    // D√©tecter ADD_MONTHS
    if (/ADD_MONTHS/i.test(message) || /ADD_MONTHS/i.test(sql)) {
      suggestions.push("ADD_MONTHS() n'existe pas en SQLite")
      suggestions.push("Utilisez : DATE(colonne, '+N months') ou DATE(colonne, '-N months')")
    }

    // D√©tecter NVL
    if (/NVL/i.test(message) || /NVL/i.test(sql)) {
      suggestions.push("NVL() n'existe pas en SQLite")
      suggestions.push('Utilisez COALESCE() ou IFNULL() √† la place')
    }

    // Suggestions g√©n√©rales pour fonctions
    if (suggestions.length === 0) {
      suggestions.push('V√©rifiez que le nom de la fonction est correct')
      suggestions.push('V√©rifiez le nombre et le type des arguments pass√©s √† la fonction')
    }

    // Ajouter suggestion de traduction Oracle
    if (
      /TRUNC|ADD_MONTHS|NVL|SYSDATE/i.test(sql) &&
      !suggestions.some((s) => s.includes('Traduction'))
    ) {
      suggestions.push(
        'üí° Syntaxe Oracle d√©tect√©e - Une traduction automatique vers SQLite est disponible'
      )
    }

    return suggestions
  }

  /**
   * Suggestions pour les erreurs de syntaxe
   */
  private getSyntaxSuggestions(message: string, sql: string): string[] {
    const suggestions: string[] = []

    suggestions.push('V√©rifiez les parenth√®ses, virgules et guillemets')
    suggestions.push('V√©rifiez que toutes les clauses (FROM, WHERE, etc.) sont bien form√©es')

    // SYSDATE sans parenth√®ses
    if (/SYSDATE/i.test(sql)) {
      suggestions.push("SYSDATE n'existe pas en SQLite")
      suggestions.push("Utilisez DATE('now') pour la date actuelle")
    }

    return suggestions
  }

  /**
   * Suggestions pour les erreurs de colonne
   */
  private getColumnSuggestions(message: string, sql: string): string[] {
    const suggestions: string[] = []

    suggestions.push('V√©rifiez que le nom de la colonne existe dans la table')
    suggestions.push('V√©rifiez les conventions Sage X3 : les champs ont des suffixes _0, _1, _2...')
    suggestions.push("Utilisez la page 'Sch√©ma' pour voir les colonnes disponibles")

    return suggestions
  }

  /**
   * Suggestions pour les erreurs de table
   */
  private getTableSuggestions(message: string, sql: string): string[] {
    const suggestions: string[] = []

    suggestions.push('V√©rifiez que le nom de la table existe dans la base de donn√©es')
    suggestions.push('Les noms de tables Sage X3 sont g√©n√©ralement en MAJUSCULES')
    suggestions.push("Consultez la page 'Sch√©ma' pour voir les tables disponibles")

    return suggestions
  }
}
