<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Playground SQL - Sage X3</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
      background: #f5f5f5;
      padding: 20px;
    }

    .container {
      max-width: 1400px;
      margin: 0 auto;
      background: white;
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      padding: 30px;
    }

    h1 {
      color: #2c3e50;
      margin-bottom: 10px;
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .subtitle {
      color: #7f8c8d;
      margin-bottom: 30px;
      font-size: 14px;
    }

    .editor-section {
      margin-bottom: 20px;
    }

    .editor-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 10px;
    }

    h2 {
      font-size: 18px;
      color: #34495e;
    }

    .examples-dropdown {
      position: relative;
      display: inline-block;
    }

    .examples-btn {
      background: #3498db;
      color: white;
      border: none;
      padding: 8px 16px;
      border-radius: 4px;
      cursor: pointer;
      font-size: 14px;
    }

    .examples-btn:hover {
      background: #2980b9;
    }

    .examples-menu {
      display: none;
      position: absolute;
      right: 0;
      top: 100%;
      background: white;
      border: 1px solid #ddd;
      border-radius: 4px;
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
      min-width: 300px;
      z-index: 1000;
      margin-top: 5px;
    }

    .examples-menu.show {
      display: block;
    }

    .example-item {
      padding: 12px;
      border-bottom: 1px solid #eee;
      cursor: pointer;
    }

    .example-item:last-child {
      border-bottom: none;
    }

    .example-item:hover {
      background: #f8f9fa;
    }

    .example-title {
      font-weight: 600;
      color: #2c3e50;
      margin-bottom: 4px;
    }

    .example-desc {
      font-size: 12px;
      color: #7f8c8d;
    }

    #editor {
      width: 100%;
      height: 300px;
      border: 1px solid #ddd;
      border-radius: 4px;
      padding: 15px;
      font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
      font-size: 14px;
      line-height: 1.5;
      resize: vertical;
      background: #f8f9fa;
    }

    .actions {
      display: flex;
      gap: 10px;
      margin: 20px 0;
    }

    button {
      padding: 12px 24px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 14px;
      font-weight: 600;
      transition: all 0.2s;
    }

    .btn-execute {
      background: #27ae60;
      color: white;
    }

    .btn-execute:hover {
      background: #229954;
    }

    .btn-validate {
      background: #3498db;
      color: white;
    }

    .btn-validate:hover {
      background: #2980b9;
    }

    .btn-clear {
      background: #95a5a6;
      color: white;
    }

    .btn-clear:hover {
      background: #7f8c8d;
    }

    #validation, #results {
      margin-top: 20px;
    }

    .validation-box {
      padding: 15px;
      border-radius: 4px;
      border-left: 4px solid;
      background: #f8f9fa;
    }

    .validation-box.success {
      border-color: #27ae60;
      background: #d5f4e6;
    }

    .validation-box.warning {
      border-color: #f39c12;
      background: #fcf3cf;
    }

    .validation-box.error {
      border-color: #e74c3c;
      background: #fadbd8;
    }

    .validation-score {
      font-size: 20px;
      font-weight: bold;
      margin-bottom: 10px;
    }

    .validation-list {
      margin: 10px 0;
      padding-left: 20px;
    }

    .validation-list li {
      margin: 5px 0;
    }

    .error-box {
      background: #fadbd8;
      border-left: 4px solid #e74c3c;
      padding: 15px;
      border-radius: 4px;
      color: #c0392b;
    }

    .results-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 15px;
    }

    .results-info {
      color: #7f8c8d;
      font-size: 14px;
    }

    .table-container {
      overflow-x: auto;
      border: 1px solid #ddd;
      border-radius: 4px;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      font-size: 13px;
    }

    th, td {
      padding: 12px;
      text-align: left;
      border-bottom: 1px solid #eee;
    }

    th {
      background: #34495e;
      color: white;
      font-weight: 600;
      position: sticky;
      top: 0;
    }

    tr:hover {
      background: #f8f9fa;
    }

    .loading {
      text-align: center;
      padding: 40px;
      color: #7f8c8d;
    }

    .spinner {
      display: inline-block;
      width: 40px;
      height: 40px;
      border: 4px solid #f3f3f3;
      border-top: 4px solid #3498db;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>üöÄ Playground SQL - Sage X3</h1>
    <p class="subtitle">Testez vos requ√™tes SQL sur des donn√©es fictives Sage X3</p>

    <div class="editor-section">
      <div class="editor-header">
        <h2>üìù √âditeur SQL</h2>
        <div class="examples-dropdown">
          <button class="examples-btn" onclick="toggleExamples()">üìö Exemples</button>
          <div id="examplesMenu" class="examples-menu"></div>
        </div>
      </div>
      <textarea id="editor" placeholder="-- √âcrivez votre requ√™te SQL ici&#10;SELECT &#10;  i.itmref_0,&#10;  i.itmdes1_0,&#10;  s.qtystu_0&#10;FROM itmmasters i&#10;LEFT JOIN stocks s ON i.itmref_0 = s.itmref_0&#10;LIMIT 10;"></textarea>
    </div>

    <div class="actions">
      <button class="btn-execute" onclick="executeQuery()">‚ñ∂Ô∏è Ex√©cuter</button>
      <button class="btn-validate" onclick="validateQuery()">‚úì Valider</button>
      <button class="btn-clear" onclick="clearEditor()">üóëÔ∏è Effacer</button>
    </div>

    <div id="validation"></div>
    <div id="results"></div>
  </div>

  <script>
    let examples = [];

    // Charger les exemples au d√©marrage
    async function loadExamples() {
      try {
        const response = await fetch('/api/playground/examples');
        const data = await response.json();
        if (data.success) {
          examples = data.examples;
          renderExamplesMenu();
        }
      } catch (error) {
        console.error('Erreur lors du chargement des exemples:', error);
      }
    }

    function renderExamplesMenu() {
      const menu = document.getElementById('examplesMenu');
      menu.innerHTML = examples.map((ex, index) => `
        <div class="example-item" onclick="loadExample(${index})">
          <div class="example-title">${ex.title}</div>
          <div class="example-desc">${ex.description}</div>
        </div>
      `).join('');
    }

    function toggleExamples() {
      const menu = document.getElementById('examplesMenu');
      menu.classList.toggle('show');
    }

    function loadExample(index) {
      const example = examples[index];
      document.getElementById('editor').value = example.sql;
      toggleExamples();
    }

    // Fermer le menu si on clique ailleurs
    document.addEventListener('click', (e) => {
      const dropdown = document.querySelector('.examples-dropdown');
      if (!dropdown.contains(e.target)) {
        document.getElementById('examplesMenu').classList.remove('show');
      }
    });

    async function executeQuery() {
      const sql = document.getElementById('editor').value.trim();
      
      if (!sql) {
        alert('Veuillez entrer une requ√™te SQL');
        return;
      }

      // Afficher un loader
      document.getElementById('results').innerHTML = '<div class="loading"><div class="spinner"></div><p>Ex√©cution en cours...</p></div>';
      document.getElementById('validation').innerHTML = '';

      try {
        const response = await fetch('/api/playground/execute', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ sql })
        });
        
        const data = await response.json();
        
        if (data.success) {
          displayValidation(data.validation);
          displayResults(data.data);
        } else {
          displayErrors(data.errors || [data.error]);
        }
      } catch (error) {
        displayErrors([error.message || 'Erreur lors de la requ√™te']);
      }
    }

    async function validateQuery() {
      const sql = document.getElementById('editor').value.trim();
      
      if (!sql) {
        alert('Veuillez entrer une requ√™te SQL');
        return;
      }

      try {
        const response = await fetch('/api/playground/validate', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ sql })
        });
        
        const validation = await response.json();
        displayValidation(validation);
        document.getElementById('results').innerHTML = '';
      } catch (error) {
        displayErrors([error.message || 'Erreur lors de la validation']);
      }
    }

    function displayValidation(validation) {
      const validationDiv = document.getElementById('validation');
      
      let boxClass = 'success';
      if (validation.errors.length > 0) boxClass = 'error';
      else if (validation.warnings.length > 0) boxClass = 'warning';
      
      let html = `<div class="validation-box ${boxClass}">`;
      html += `<div class="validation-score">Score: ${validation.score}/100</div>`;
      
      if (validation.errors.length > 0) {
        html += '<div><strong>‚ùå Erreurs:</strong><ul class="validation-list">';
        validation.errors.forEach(e => html += `<li>${e}</li>`);
        html += '</ul></div>';
      }
      
      if (validation.warnings.length > 0) {
        html += '<div><strong>‚ö†Ô∏è Avertissements:</strong><ul class="validation-list">';
        validation.warnings.forEach(w => html += `<li>${w}</li>`);
        html += '</ul></div>';
      }
      
      if (validation.errors.length === 0 && validation.warnings.length === 0) {
        html += '<div><strong>‚úÖ Requ√™te valide !</strong></div>';
      }
      
      html += '</div>';
      validationDiv.innerHTML = html;
    }

    function displayResults(data) {
      const resultsDiv = document.getElementById('results');
      
      if (!data.rows || data.rows.length === 0) {
        resultsDiv.innerHTML = '<div class="error-box">Aucun r√©sultat</div>';
        return;
      }

      const columns = Object.keys(data.rows[0]);
      
      let html = '<div class="results-header">';
      html += `<h2>üìä R√©sultats</h2>`;
      html += `<div class="results-info">${data.rowCount} ligne(s) ‚Ä¢ ${data.executionTime}ms</div>`;
      html += '</div>';
      
      html += '<div class="table-container"><table><thead><tr>';
      
      columns.forEach(col => {
        html += `<th>${col}</th>`;
      });
      
      html += '</tr></thead><tbody>';
      
      data.rows.forEach(row => {
        html += '<tr>';
        columns.forEach(col => {
          const value = row[col];
          html += `<td>${value !== null && value !== undefined ? value : '<em>null</em>'}</td>`;
        });
        html += '</tr>';
      });
      
      html += '</tbody></table></div>';
      resultsDiv.innerHTML = html;
    }

    function displayErrors(errors) {
      const resultsDiv = document.getElementById('results');
      resultsDiv.innerHTML = '<div class="error-box"><h3>‚ùå Erreur</h3><ul class="validation-list">' + 
        errors.map(e => '<li>' + e + '</li>').join('') + 
        '</ul></div>';
    }

    function clearEditor() {
      document.getElementById('editor').value = '';
      document.getElementById('validation').innerHTML = '';
      document.getElementById('results').innerHTML = '';
    }

    // Charger les exemples au d√©marrage
    loadExamples();
  </script>
</body>
</html>
